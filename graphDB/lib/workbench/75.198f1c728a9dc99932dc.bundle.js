(window.webpackJsonp=window.webpackJsonp||[]).push([[75,162],{68:function(e,t,n){"use strict";n.r(t),n.d(t,"ImportResourceStatus",(function(){return c}));const c={NONE:"NONE",UPLOADING:"UPLOADING",UPLOAD_ERROR:"UPLOAD_ERROR",UPLOADED:"UPLOADED",PENDING:"PENDING",IMPORTING:"IMPORTING",DONE:"DONE",ERROR:"ERROR",INTERRUPTING:"INTERRUPTING"}},78:function(e,t,n){"use strict";n.r(t),n.d(t,"TABS",(function(){return r}));var c=n(27),o=n(68);const r={USER:"user",SERVER:"server"};function s(e){let t=r.USER,n=[],s=[],u=[],d=!0,i=[];return{updateActiveTabId:function(n){t=n,e.emitSync("activeTabIdUpdated",l())},getActiveTabId:l,onActiveTabIdUpdated:function(t){return e.subscribeSync("activeTabIdUpdated",e=>t(e))},getFiles:m,addFile:function(t){const n=m();n.push(t),f(n),e.emitSync("fileAdded",Object(c.cloneDeep)(t))},updateFiles:f,onFilesUpdated:function(t){return e.subscribeSync("filesUpdated",e=>t(e))},getImportedResources:U,updateImportedResources:function(t){n=t,e.emitSync("importedResourcesUpdated",U()),e.emitSync("resourcesUpdated",R())},onImportedResourcesUpdated:function(t){return e.subscribeSync("importedResourcesUpdated",e=>t(e))},getResources:R,onResourcesUpdated:function(t){return e.subscribeSync("resourcesUpdated",e=>t(e))},updateShowLoader:function(t){d=t,e.emitSync("showLoaderUpdated",p())},getShowLoader:p,onShowLoaderUpdated:function(t){return e.subscribeSync("showLoaderUpdated",e=>t(e))},updateSelectedFilesNames:function(t){i=Object(c.cloneDeep)(t),e.emitSync("selectedFilesNamesUpdated",a())},getSelectedFilesNames:a,onSelectedFilesNamesUpdated:function(t){return e.subscribeSync("selectedFilesNamesUpdated",e=>t(e))},updateResourceForUpload:function(e){const t=S(),n=t.find(({name:t})=>t===e.name);n?Object.assign(n,e):t.push(e);b(t)},getResourceForUpload:function(e){return Object(c.cloneDeep)(s.find(({name:t})=>t===e))},updateResourcesForUpload:b,getResourcesForUpload:S,onResourcesForUploadChanged:function(t){return e.subscribeSync("resourcesForUploadChanged",e=>t(e))}};function a(){return Object(c.cloneDeep)(i)}function p(){return d}function l(){return t}function f(t){u=Object(c.cloneDeep)(t),e.emitSync("filesUpdated",m())}function m(){return Object(c.cloneDeep)(u)}function U(){return Object(c.cloneDeep)(n)||[]}function R(){const e=U();let t=S();const n=[],c=[];return e.forEach(({name:e})=>{const r=t.find(({name:t})=>t===e);r&&(r.status===o.ImportResourceStatus.UPLOADED?n.push(r):c.push(r))}),n.length>0&&(t=t.filter(({name:e})=>!n.some(({name:t})=>t===e)),b(t,!1)),e.filter(({name:e})=>!c.some(t=>e===t)).concat(t)}function b(t,n=!0){s=Object(c.cloneDeep)(t),e.emitSync("resourcesForUploadChanged",S()),n&&e.emitSync("resourcesUpdated",R())}function S(){return Object(c.cloneDeep)(s)||[]}}angular.module("graphdb.framework.import.services.importcontext",[]).factory("ImportContextService",s),s.$inject=["EventEmitterService"]}}]);